basePath: /
definitions:
  model.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/model.UserInfo'
    type: object
  model.CreateTodoRequest:
    properties:
      description:
        example: Finish the todo API backend project
        maxLength: 1000
        type: string
      title:
        example: Complete project
        maxLength: 255
        minLength: 1
        type: string
    required:
    - title
    type: object
  model.ErrorResponse:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      error:
        example: validation_failed
        type: string
      message:
        example: Invalid input data
        type: string
    type: object
  model.HealthResponse:
    properties:
      database:
        example: connected
        type: string
      status:
        example: ok
        type: string
      time:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  model.Todo:
    properties:
      completed:
        example: false
        type: boolean
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      description:
        example: Finish the todo API backend project
        type: string
      id:
        example: 1
        type: integer
      title:
        example: Complete project
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        example: 1
        type: integer
    type: object
  model.TodoListResponse:
    properties:
      count:
        example: 5
        type: integer
      todos:
        items:
          $ref: '#/definitions/model.Todo'
        type: array
    type: object
  model.UpdateTodoRequest:
    properties:
      completed:
        example: true
        type: boolean
      description:
        example: Updated description
        maxLength: 1000
        type: string
      title:
        example: Updated task title
        maxLength: 255
        minLength: 1
        type: string
    type: object
  model.User:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 1
        type: integer
      todos:
        items:
          $ref: '#/definitions/model.Todo'
        type: array
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  model.UserInfo:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@todoapi.com
    name: API Support
  description: |-
    A comprehensive Todo API backend built with Go and Gin framework
    This API provides user authentication, JWT-based authorization, and full CRUD operations for todo items.
    The backend uses PostgreSQL for data persistence and follows clean architecture principles.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Todo API Backend
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully authenticated
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Invalid request data or validation failed
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login user
      tags:
      - authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Invalid request data or validation failed
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /api/v1/todos:
    get:
      description: Retrieve all todos belonging to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of todos retrieved successfully
          schema:
            $ref: '#/definitions/model.TodoListResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo item for the authenticated user
      parameters:
      - description: Todo creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Todo successfully created
          schema:
            $ref: '#/definitions/model.Todo'
        "400":
          description: Invalid request data or validation failed
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new todo
      tags:
      - todos
  /api/v1/todos/{id}:
    delete:
      description: Delete a specific todo by ID, ensuring user ownership
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Todo deleted successfully
        "400":
          description: Invalid todo ID format
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete todo
      tags:
      - todos
    get:
      description: Retrieve a specific todo by ID, ensuring user ownership
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Todo retrieved successfully
          schema:
            $ref: '#/definitions/model.Todo'
        "400":
          description: Invalid todo ID format
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update a specific todo by ID, ensuring user ownership
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Todo updated successfully
          schema:
            $ref: '#/definitions/model.Todo'
        "400":
          description: Invalid request data or validation failed
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Todo not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update todo
      tags:
      - todos
  /health:
    get:
      description: Check the health status of the API and database connection
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/model.HealthResponse'
        "503":
          description: Service is unhealthy
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Health check
      tags:
      - health
  /ready:
    get:
      description: Check if the API is ready to serve requests
      produces:
      - application/json
      responses:
        "200":
          description: Service is ready
          schema:
            $ref: '#/definitions/model.HealthResponse'
        "503":
          description: Service is not ready
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Readiness check
      tags:
      - health
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: User registration and authentication endpoints
  name: authentication
- description: Todo CRUD operations (requires authentication)
  name: todos
- description: Health check and readiness endpoints
  name: health
